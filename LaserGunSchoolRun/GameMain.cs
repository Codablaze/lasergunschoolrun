using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace LaserGunSchoolRun;

public class GameMain : Game
{
    private GraphicsDeviceManager _graphics;
    private SpriteBatch _spriteBatch;
    private Texture2D _monster, _laser;
    private Player _player;
    private Weapon _weapon;
    private Hud _hud = new Hud();
    private SpriteFont _font;
    private readonly List<Projectile> _projectiles = new(); // stored in a world or map object and generated by a weapon later
    private readonly List<BasicEnemy> _enemies = new(); // stored in a world or map object and generated by a system later

    private World _world;

    public GameMain()
    {
        _graphics = new GraphicsDeviceManager(this)
        {
            PreferredBackBufferWidth = 500,
            PreferredBackBufferHeight = 800
        };
        Content.RootDirectory = "Content";
        IsMouseVisible = false;
        IsFixedTimeStep = false;
    }

    protected override void Initialize()
    {
        base.Initialize();
    }

    protected override void LoadContent()
    {
        _spriteBatch = new SpriteBatch(GraphicsDevice);
        _monster = Content.Load<Texture2D>("Monster_Energy_Med");
        _laser = Content.Load<Texture2D>("Laser");
        _font = Content.Load<SpriteFont>("File");

        // terrible code please excuse
        Projectile.Width = _laser.Width;
        Projectile.Height = _laser.Height;
        BasicEnemy.Width = _monster.Width;
        BasicEnemy.Height = _monster.Height;

        var viewport = GraphicsDevice.Viewport.Bounds;

        var startPos = new Vector2(
            viewport.Width / 2 - _monster.Width / 2,
            viewport.Height / 2 - _monster.Height / 2);

        // exclude top third of screen
        var bounds = new Rectangle(0, viewport.Height / 3, viewport.Width, (viewport.Height / 3) * 2);

        _player = new Player()
        {
            Position = startPos,
            Width = _monster.Width,
            Height = _monster.Height,
            Bounds = bounds
        };

        _weapon = new Weapon(
            _player,
            _projectiles);

        _world = new World(_player, _weapon, _projectiles, _enemies, _hud)
        {
            ScreenWidth = bounds.Width
        };
    }

    protected override void Update(GameTime gameTime)
    {
        var kb = Keyboard.GetState();
        var ms = Mouse.GetState();

        if (kb.IsKeyDown(Keys.Escape))
            Exit();

        var inputContext = new InputContext // this is to abstract away input devices from game actions
        {
            MoveLeft = kb.IsKeyDown(Keys.A),
            MoveRight = kb.IsKeyDown(Keys.D),
            MoveBack = kb.IsKeyDown(Keys.S),
            MoveForward = kb.IsKeyDown(Keys.W),
            IsFiring = ms.LeftButton == ButtonState.Pressed
        };

        _world.Update(inputContext, gameTime);

        base.Update(gameTime);
    }

    protected override void Draw(GameTime gameTime)
    {
        GraphicsDevice.Clear(Color.Black);

        _spriteBatch.Begin(transformMatrix: Matrix.Identity);

        // draw projectiles
        foreach (var item in _projectiles)
            DrawCentered(_laser, item.Position);

        // draw enemies
        foreach (var item in _enemies)
            DrawCentered(_monster, item.Position);

        // draw player
        DrawCentered(_monster, _player.Position);

        _spriteBatch.End();

        // screen
        _spriteBatch.Begin();
        _spriteBatch.DrawString(_font, $"Enemies killed: {_hud.EnemiesKilled}", 
            new Vector2(10, GraphicsDevice.Viewport.Height-25), Color.Pink);
        _spriteBatch.End();

        base.Draw(gameTime);
    }

    private void DrawCentered(Texture2D tex, Vector2 pos)
    {
        _spriteBatch.Draw(
            texture: tex,
            position: pos,
            sourceRectangle: null,
            color: Color.White,
            rotation: 0f,
            origin: new Vector2(tex.Width / 2, tex.Height / 2),
            scale: 1f,
            SpriteEffects.None,
            1f);
    }
}