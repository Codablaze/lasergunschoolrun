using System.Collections.Generic;
using System.Globalization;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace LaserGunSchoolRun;

public class GameMain : Game
{
    private GraphicsDeviceManager _graphics;
    private SpriteBatch _spriteBatch;
    private Texture2D _monster;
    private Player _player;
    private Weapon _weapon;
    private readonly List<Projectile> _projectiles = new(); // stored in a world or map object and generated by a weapon later

    public GameMain()
    {
        _graphics = new GraphicsDeviceManager(this)
        {
            PreferredBackBufferWidth = 1920 / 2,
            PreferredBackBufferHeight = 1080 / 2
        };
        Content.RootDirectory = "Content";
        IsMouseVisible = false;
        IsFixedTimeStep = false;
    }

    protected override void Initialize()
    {
        base.Initialize();
    }

    protected override void LoadContent()
    {
        _spriteBatch = new SpriteBatch(GraphicsDevice);
        _monster = Content.Load<Texture2D>("Monster_Energy_Med");

        var viewport = GraphicsDevice.Viewport.Bounds;

        var startPos = new Vector2(
            viewport.Width / 2 - _monster.Width / 2,
            viewport.Height / 2 - _monster.Height / 2);

        // exclude top third of screen
        var bounds = new Rectangle(0, viewport.Height / 3, viewport.Width, (viewport.Height / 3) * 2);

        _player = new Player()
        {
            Position = startPos,
            Width = _monster.Width,
            Height = _monster.Height,
            Bounds = bounds
        };

        _weapon = new Weapon(
            _player,
            _projectiles);
    }

    protected override void Update(GameTime gameTime)
    {
        var kb = Keyboard.GetState();
        var ms = Mouse.GetState();

        if (kb.IsKeyDown(Keys.Escape))
            Exit();

        var dt = (float)gameTime.ElapsedGameTime.TotalSeconds;

        var inputContext = new InputContext // this is to abstract away input devices from game actions
        {
            MoveLeft = kb.IsKeyDown(Keys.A),
            MoveRight = kb.IsKeyDown(Keys.D),
            MoveBack = kb.IsKeyDown(Keys.S),
            MoveForward = kb.IsKeyDown(Keys.W),
            IsFiring = ms.LeftButton == ButtonState.Pressed
        };

        _player.Update(inputContext, dt);
        _weapon.Update(inputContext, gameTime.ElapsedGameTime);

        foreach (var item in _projectiles)
        {
            item.Update(dt);
        }

        base.Update(gameTime);
    }

    protected override void Draw(GameTime gameTime)
    {
        GraphicsDevice.Clear(Color.Black);

        _spriteBatch.Begin(transformMatrix: Matrix.Identity);

        // draw projectiles
        foreach (var item in _projectiles)
        {
            _spriteBatch.Draw(
                texture: _monster,
                position: item.Position,
                sourceRectangle: null,
                color: Color.White,
                rotation: 0f,
                origin: new Vector2(_monster.Width / 2, _monster.Height / 2),
                scale: 1f,
                SpriteEffects.None,
                1f);
        }

        // draw player
        _spriteBatch.Draw(
            texture: _monster,
            position: _player.Position,
            sourceRectangle: null,
            color: Color.White,
            rotation: 0f,
            origin: new Vector2(_monster.Width / 2, _monster.Height / 2),
            scale: 1f,
            SpriteEffects.None,
            1f);

        _spriteBatch.End();

        base.Draw(gameTime);
    }
}